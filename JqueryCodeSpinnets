                                 JQUERY CODE SNIPPETS
 -------------------------------------------------------------------------------------------------------------------------------------
1) //Function to filter Json data based on filter conditions
 
  function find_in_object(my_object, my_criteria)
    {
        return my_object.filter(function (obj) {
            return Object.keys(my_criteria).every(function (c) {
                return obj[c].stripHtml().trim() == my_criteria[c];
            });
        });
    }
    find_in_object(hotdata,{ProductType :"Events",ParameterId:12});
--------------------------------------------------------------------------------------------------------------------------------------
2)//Ajax Promise 
      var param ="Parameters"
       GetData(param).done(function(response)
        {
           alert("On Sucess Funcationality goes here")

        }).fail(function(xhr)
        {
             alert("On Fail Funcationality goes here")
        });
        
        
    function GetData(message)
    {
       
        return $.ajax({
            type: "Post",
            url: '@Url.Content("~/Home/GetSplineGrid/")',
            //data: JSON.stringify(message),
            dataType: 'html',
            contentType: "application/json; charset=utf-8"

        });
      
    }
    -------------------------------------------------------------------------------------------------------------------------------------
3) // Creating functions  using Prototype
      --Best way for maintaing common function 

    (function ($) {

    this.Common = function () { };

    //Start=========Numer format - Denomination algorthm===============
    Common.prototype.calculateDenomination = function (value, previousDenomination, currentDenomination, roudOff) {

        if (!$.isNumeric(value)) {
            return value;
        }
        previousDenomination = previousDenomination ? previousDenomination.trim() : previousDenomination;
        currentDenomination = currentDenomination ? currentDenomination.trim() : currentDenomination;

        var _current = null, _selected = null, _result = value ? parseFloat(value) : 0;
        previousDenomination = previousDenomination ? previousDenomination : "A";
        if (value && previousDenomination && currentDenomination) {
            try {
                _current = getDenominationValue(previousDenomination.trim());
                selected = getDenominationValue(currentDenomination.trim());
                if (_current && selected) {
                    //_result = roudOff ? ((value * _current) / selected).noExponents().toString().match(/^-?\d+(?:\.\d{0,2})?/)[0] : ((value * _current) / selected).noExponents();
                    //_result = roudOff ? Math.round(((value * _current) / selected) * 100)/100 : ((value * _current) / selected);
                    _result = roudOff ? parseFloat(((value * _current) / selected).noExponents()).toFixed(2) : ((value * _current) / selected).noExponents();
                }

            } catch (e) {
                _result = 0;
            }
        }
        return _result;//
    }

  
    //End=========Numer format - Denomination algorthm===============


    //Start=========Forecast duration - Generating start year to end year of a forecast===============
    Common.prototype.GenerateForecastDuration = function (startYear, frequency, numOfFrequency) {

        try {
            var monthName = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

            var liColumns = [],
                forecastYear = new Date(startYear).getFullYear(),
                forecastMonth = new Date(startYear).getMonth(),
                yearForecast = 0;

            if (forecastYear && forecastMonth >= 0) {
                if (frequency.toUpperCase() == "YEAR") {
                    for (var i = 0; i <= numOfFrequency; i++) {
                        yearForecast = forecastYear + i;
                        liColumns.push(yearForecast.toString());
                    }
                }
                else if (frequency.toUpperCase() == "QUARTER") {
                    for (var i = 0; i <= numOfFrequency; i++) {
                        if (i > 0) {
                            forecastMonth += 3;
                            if (forecastMonth > 11) {
                                forecastMonth = forecastMonth - 12;
                                forecastYear = forecastYear + 1;
                            }
                        }
                        var currentQuarterName = getQuarterName(forecastMonth);
                        liColumns.push(currentQuarterName + "-" + forecastYear);
                    }
                }
                else if (frequency.toUpperCase() == "MONTH") {
                    for (var i = 0; i <= numOfFrequency; i++) {
                        var currentMonthName = monthName[forecastMonth];
                        liColumns.push(currentMonthName + "-" + forecastYear);
                        forecastMonth += 1;
                        if (forecastMonth > 11) {
                            forecastYear = forecastYear + 1;
                            forecastMonth = 0;
                        }
                    }
                }
            }
            return liColumns;
        } catch (e) {
            return [];
        }
    }

 

    Common.prototype.getQueryStringValue = function (name, url) {
        if (!url)
            url = window.location.href.toLowerCase();
        name = name.replace(/[\[\]]/g, "\\$&").toLowerCase();
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }

    Common.prototype.findElementPosition = function (elementId) {
        var curtop = 0,
            obj = document.getElementById(elementId);
        if (obj && obj.offsetParent) {
            do {
                curtop += obj.offsetTop;
            }
            while (obj = obj.offsetParent);
            return [curtop];
        }
        else {
            return document.body.scrollTop;
        }
    }

    //Synchronous version of setTimeOut function
    Common.prototype.syncSetTimeout = function (arg1, delay) {
        var dt = new Date();
        while ((new Date()) - dt <= delay){ }
        arg1();
    }

    Common.prototype.calculateAverage = function(arrayParam){
        if (arrayParam && $.isArray(arrayParam)) {
            var sum = arrayParam.reduce((a, b) => a + b, 0);
            return sum/arrayParam.length;
        }
        else {
            console.warn('Parameter should be an array to calculate the average');
        }
    }

})(jQuery);

    var common = new Common();
    common.GenerateForecastDuration(oldLaunchDate,type,"0");
----------------------------------------------------------------------------------------------------------------------------------------
4) //Extension Methods in Javascript


//Format number with thousand separator 
Number.prototype.numericFormat = function numberWithCommas() {
    var num = this;
    var parts = num.toString().split(".");
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return parts.join(".");
}

//Format number with thousand separator 
String.prototype.numericFormat = function numberWithCommas() {
    var num = this;
    var parts = num.split(".");
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return parts.join(".");
}

//strip html tags from string 
String.prototype.stripHtml = function () {
    try {
        var str = this ? this : '';
        return str.replace(/<\/?[^>]+>/gi, '').replace(/&nbsp;/g, '');

    } catch (e) {
        return '';
    }
}

Number.prototype.noExponents = function () {
    var data = String(this).split(/[eE]/);
    if (data.length == 1) return data[0];

    var z = '', sign = this < 0 ? '-' : '',
    str = data[0].replace('.', ''),
    mag = Number(data[1]) + 1;

    if (mag < 0) {
        z = sign + '0.';
        while (mag++) z += '0';
        return z + str.replace(/^\-/, '');
    }
    mag -= str.length;
    while (mag--) z += '0';
    return str + z;
}

Date.prototype.addDays = function (days) {
    var dat = new Date(this.valueOf());
    dat.setDate(dat.getDate() + days);
    return dat;
}

Date.prototype.addMonths = function (days) {
    var dat = new Date(this.valueOf());
    dat.setMonth(dat.getMonth() + days);
    return dat;
}

Date.prototype.addYears = function (days) {
    var dat = new Date(this.valueOf());
    dat.setFullYear(dat.getFullYear() + days);
    return dat;
}

Date.prototype.getNextQuaterDate = function() {
    var currentDate = new Date(this.valueOf()),
        currentMonth = currentDate.getMonth(),
        currentYear = currentDate.getFullYear(),
        quaterNumber = Math.floor((currentMonth + 3) / 3),
        result = null;
    switch (quaterNumber) {
        case 1:
            result = new Date('04/01/' + currentYear);
            break;
        case 2:
            result = new Date('07/01/' + currentYear);
            break;
        case 3:
            result = new Date('10/01/' + currentYear);
            break;
        case 4:
            result = new Date('01/01/' + (currentYear + 1));
            break;
    }
    return result;
}

